import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import networkx as nx # noqa: F401
from IPython.display import display

# Загрузка данных
df = pd.read_csv("C:\\Users\\Alksq\\OneDrive\\Рабочий стол\\interactions.csv")

# 1. Предварительный анализ данных
print("Базовая статистика:")
display(df.describe())

print("\nПроверка пропусков:")
print(df.isnull().sum())

# 2. Визуализация распределения параметров
plt.figure(figsize=(15, 12))

# Распределение основных scores
scores = ['score', 'escore', 'dscore', 'tscore', 'ascore']
for i, col in enumerate(scores, 1):
    plt.subplot(3, 2, i)
    sns.histplot(df[col], bins=30, kde=True)
    plt.title(f'Распределение {col}')
    plt.axvline(df[col].median(), color='r', linestyle='--')
plt.tight_layout()
plt.show()

# 3. Корреляция между типами данных (Спирмен)
plt.figure(figsize=(12, 10))
corr_matrix = df[['nscore', 'fscore', 'pscore', 'ascore', 'escore',
                 'dscore', 'tscore']].corr(method='spearman')  # Изменено здесь

sns.heatmap(corr_matrix, annot=True, cmap='coolwarm', fmt=".2f",
            annot_kws={"size": 8}, vmin=-1, vmax=1)
plt.title("Корреляция Спирмена между источниками данных")
plt.xticks(rotation=45)
plt.yticks(rotation=0)
plt.tight_layout()
plt.show()

# 4. Анализ самых значимых взаимодействий
top_genes = pd.concat([df['preferredName_A'], df['preferredName_B']]).value_counts().head(20)

plt.figure(figsize=(10, 6))
top_genes.plot(kind='barh', color='teal')
plt.title("Топ-20 генов по количеству взаимодействий")
plt.xlabel("Количество связей")
plt.gca().invert_yaxis()
plt.show()

# 5. Фильтрация высоконадежных взаимодействий
high_confidence = df[
    (df['score'] >= 0.9) &
    (df['escore'] >= 0.8) &
    (df['dscore'] >= 0.7)
]

print(f"\nВысоконадежные взаимодействия: {len(high_confidence)}")

print("\nПроверка данных для сети:")
print(f"Количество взаимодействий: {len(high_confidence)}")
print("Пример данных:")
print(high_confidence[['preferredName_A', 'preferredName_B', 'score']].head(3))

# 5.1 Сетевой график (НОВЫЙ БЛОК)
if not high_confidence.empty:
    try:
        import networkx as nx

        plt.figure(figsize=(20, 20))
        G = nx.from_pandas_edgelist(
            high_confidence,
            source='preferredName_A',
            target='preferredName_B',
            edge_attr='score'
        )

        # Параметры визуализации
        pos = nx.spring_layout(G, k=0.5, iterations=200, seed=42)

        nx.draw_networkx_nodes(
            G, pos,
            node_size=200,
            node_color='tomato',
            alpha=0.9
        )
        nx.draw_networkx_edges(
            G, pos,
            edge_color='darkblue',
            width=1.5,
            alpha=0.8
        )
        nx.draw_networkx_labels(
            G, pos,
            font_size=10,
            font_family='Arial',
            font_weight='bold'
        )

        plt.title("Сеть взаимодействий (high confidence)")
        plt.axis('off')
        plt.tight_layout()
        plt.show()

    except Exception as e:
        print(f"Ошибка при построении сети: {str(e)}")
else:
    print("Недостаточно данных для построения сетевого графика")

# 5.2 Точечная диаграмма escore vs dscore
if not high_confidence.empty:
    plt.figure(figsize=(10, 8))

    # Создаем scatter plot и сохраняем объект
    scatter = sns.scatterplot(
        data=high_confidence,
        x='escore',
        y='dscore',
        hue='score',
        palette='viridis',
        size='score',
        sizes=(20, 200),
        alpha=0.6
    )

    # Получаем текущие оси и создаем цветовую шкалу
    norm = plt.Normalize(
        high_confidence['score'].min(),
        high_confidence['score'].max()
    )
    sm = plt.cm.ScalarMappable(cmap='viridis', norm=norm)
    sm.set_array([])

    # Добавляем colorbar к текущим осям
    plt.colorbar(sm, ax=scatter.axes, label='Combined Score')

    plt.title("Соотношение экспериментальных и баз данных (escore vs dscore)")
    plt.xlabel("Experimental Score")
    plt.ylabel("Database Score")
    plt.grid(alpha=0.2)
    plt.tight_layout()
    plt.show()
# 5.3 Интерактивный график (НОВЫЙ БЛОК)
if not high_confidence.empty:
    import plotly.express as px

    fig = px.scatter(
        high_confidence,
        x='escore',
        y='dscore',
        color='score',
        hover_data=['preferredName_A', 'preferredName_B'],
        title="Escore vs Dscore (интерактивный)",
        labels={'escore': 'Experimental Score', 'dscore': 'Database Score'},
        color_continuous_scale='viridis'
    )
    fig.update_layout(width=1000, height=800)
    fig.show()

# 5.4 3D-визуализация сети (НОВЫЙ БЛОК)
if not high_confidence.empty:
    import plotly.graph_objects as go
    import networkx as nx

    # Генерация 3D позиций
    pos = nx.spring_layout(G, dim=3, seed=42)

    # Подготовка данных для ребер
    edge_trace = []
    for edge in G.edges():
        x0, y0, z0 = pos[edge[0]]
        x1, y1, z1 = pos[edge[1]]
        edge_trace.append(
            go.Scatter3d(
                x=[x0, x1, None],
                y=[y0, y1, None],
                z=[z0, z1, None],
                mode='lines',
                line=dict(width=1, color='#888'),
                hoverinfo='none'
            )
        )

    # Подготовка данных для узлов
    node_trace = go.Scatter3d(
        x=[pos[node][0] for node in G.nodes()],
        y=[pos[node][1] for node in G.nodes()],
        z=[pos[node][2] for node in G.nodes()],
        mode='markers+text',
        marker=dict(
            size=6,
            color=[pos[node][2] for node in G.nodes()],  # Цвет по Z-координате
            colorscale='Viridis',
            opacity=0.8
        ),
        text=list(G.nodes()),
        textposition="top center",
        hoverinfo='text'
    )

    # Создание фигуры
    fig = go.Figure(
        data=edge_trace + [node_trace],
        layout=go.Layout(
            scene=dict(
                xaxis=dict(visible=False),
                yaxis=dict(visible=False),
                zaxis=dict(visible=False)
            ),
            margin=dict(t=20, b=20, l=20, r=20),
            showlegend=False,
            hovermode='closest'
        )
    )

    fig.update_layout(
        title='3D Сеть белковых взаимодействий',
        width=1200,
        height=800
    )
    fig.show()

# 6. Связь с известными генами старения
aging_genes = {'TP53', 'SIRT1', 'SIRT6', 'FOXO3', 'MTOR', 'AKT1',
              'IGF1R', 'TERT', 'CDKN2A', 'KLOTHO'}

aging_interactions = df[
    df['preferredName_A'].isin(aging_genes) |
    df['preferredName_B'].isin(aging_genes)
]

print(f"\nВзаимодействия с известными генами старения: {len(aging_interactions)}")

# 7. Анализ комбинированных показателей
df['experimental_evidence'] = df['escore'] + df['dscore']
top_exp = df.nlargest(20, 'experimental_evidence')[['preferredName_A', 'preferredName_B', 'escore', 'dscore']]

print("\nТоп взаимодействий с экспериментальным подтверждением:")
display(top_exp)
